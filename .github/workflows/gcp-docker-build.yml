name: Build & Push Brand Service

on:
  push:
    branches:
      - main
    paths:
      - 'brand/**'
      - '!brand/**/*.md'  # Exclude markdown files

permissions:
  contents: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/115597884357/locations/global/workloadIdentityPools/actions-pool/providers/github-provider'
          service_account: 'github-actions@eru-labs-mgmt.iam.gserviceaccount.com'
          token_format: 'access_token'

      - name: Configure Docker for Artifact Registry
        run: |
          echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin us-central1-docker.pkg.dev

      - name: Verify authentication
        run: |
          gcloud auth list
          gcloud config list

      - name: Set environment variables
        run: |
          DATE_TAG=$(date '+%Y%m%d')
          GIT_COMMIT_TAG=$(git rev-parse --short HEAD)
          IMAGE_VERSION="${DATE_TAG}-${GIT_COMMIT_TAG}"
          IMAGE_BASE="us-central1-docker.pkg.dev/eru-labs-mgmt/eru-labs-images/brand"
          
          echo "IMAGE_VERSION=${IMAGE_VERSION}" >> "$GITHUB_ENV"
          echo "IMAGE_BASE=${IMAGE_BASE}" >> "$GITHUB_ENV"

      - name: Docker build and push
        working-directory: brand
        run: |
          docker build -t ${IMAGE_BASE}:${IMAGE_VERSION} -t ${IMAGE_BASE}:latest .
          docker push ${IMAGE_BASE}:${IMAGE_VERSION}
          docker push ${IMAGE_BASE}:latest

      - name: Package and Push Helm Chart
        working-directory: brand
        run: |
          CHART_REGISTRY="us-central1-docker.pkg.dev/eru-labs-mgmt/eru-labs-images"
          
          # Update Chart.yaml version and appVersion
          sed -i "s/^version: .*/version: $IMAGE_VERSION/" chart/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: $IMAGE_VERSION/" chart/Chart.yaml
          
          # Package and push the chart
          helm package chart/
          CHART_PACKAGE=$(ls brand-*.tgz)
          helm push $CHART_PACKAGE oci://$CHART_REGISTRY

      - name: Get previous release info
        id: prev_release
        run: |
          # Get the latest release tag for this service
          LATEST_TAG=$(git tag -l "brand-*" --sort=-version:refname | head -n1 || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous release found"
            echo "PREV_TAG=" >> "$GITHUB_ENV"
          else
            echo "Previous release: $LATEST_TAG"
            echo "PREV_TAG=$LATEST_TAG" >> "$GITHUB_ENV"
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          RELEASE_TAG="brand-${{ env.IMAGE_VERSION }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Brand Service Release - ${{ env.IMAGE_VERSION }}
          
          ### 🚀 Build Information
          - **Docker Image**: \`${IMAGE_BASE}:${{ env.IMAGE_VERSION }}\`
          - **Helm Chart**: \`brand:${{ env.IMAGE_VERSION }}\`
          - **Git Commit**: \`$(git rev-parse HEAD)\`
          - **Build Date**: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`
          
          ### 📦 Artifacts
          - Docker image pushed to Artifact Registry
          - Helm chart packaged and pushed to OCI registry
          
          EOF
          
          # Add commit history if we have a previous release
          if [ -n "${{ env.PREV_TAG }}" ]; then
            echo "### 📝 Changes since ${{ env.PREV_TAG }}" >> release_notes.md
            echo "" >> release_notes.md
            git log --oneline --no-merges ${{ env.PREV_TAG }}..HEAD -- brand/ >> release_notes.md || true
          else
            echo "### 📝 Initial Release" >> release_notes.md
            echo "This is the first release of the brand service." >> release_notes.md
          fi
          
          echo "RELEASE_NOTES_FILE=release_notes.md" >> "$GITHUB_ENV"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "brand-${{ env.IMAGE_VERSION }}"
          name: "Brand Service - ${{ env.IMAGE_VERSION }}"
          body_path: release_notes.md
          generate_release_notes: false
          draft: false
          prerelease: false